#!/usr/bin/env python3
PACKAGE="riptide_controllers"

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

p_values = gen.add_group("p_values")
linear_drag = gen.add_group("linear_drag")
quadratic_drag = gen.add_group("quadratic_drag")
buoyancy = gen.add_group("buoyancy")
linear_motion = gen.add_group("linear_motion")
angular_motion = gen.add_group("angular_motion")

#               Name                Type    Level   Description             Default Min Max
p_values.add("linear_position_p_x",  double_t, 1, "x component of P value for linear position",  60, -999, 999)
p_values.add("linear_position_p_y",  double_t, 1, "y component of P value for linear position",  60, -999, 999)
p_values.add("linear_position_p_z",  double_t, 1, "z component of P value for linear position",  60, -999, 999)
p_values.add("linear_velocity_p_x",  double_t, 1, "x component of P value for linear velocity",  60, -999, 999)
p_values.add("linear_velocity_p_y",  double_t, 1, "y component of P value for linear velocity",  60, -999, 999)
p_values.add("linear_velocity_p_z",  double_t, 1, "z component of P value for linear velocity",  60, -999, 999)

p_values.add("angular_position_p_x", double_t, 1, "x component of P value for angular position", 60, -999, 999)
p_values.add("angular_position_p_y", double_t, 1, "y component of P value for angular position", 60, -999, 999)
p_values.add("angular_position_p_z", double_t, 1, "z component of P value for angular position", 60, -999, 999)
p_values.add("angular_velocity_p_x", double_t, 1, "x component of P value for angular velocity",  60, -999, 999)
p_values.add("angular_velocity_p_y", double_t, 1, "y component of P value for angular velocity",  60, -999, 999)
p_values.add("angular_velocity_p_z", double_t, 1, "z component of P value for angular velocity",  60, -999, 999)

linear_drag.add("linear_x", double_t, 1, "x value for linear drag",  60, -999, 999)
linear_drag.add("linear_y", double_t, 1, "y value for linear drag",  60, -999, 999)
linear_drag.add("linear_z", double_t, 1, "z value for linear drag",  60, -999, 999)
linear_drag.add("linear_rot_x", double_t, 1, "rotation about x axis for linear drag",  60, -999, 999)
linear_drag.add("linear_rot_y", double_t, 1, "rotation about y axis for linear drag",  60, -999, 999)
linear_drag.add("linear_rot_z", double_t, 1, "rotation about z axis for linear drag",  60, -999, 999)

quadratic_drag.add("quadratic_x", double_t, 1, "x value for quadraic drag",  60, -999, 999)
quadratic_drag.add("quadratic_y", double_t, 1, "y value for quadraic drag",  60, -999, 999)
quadratic_drag.add("quadratic_z", double_t, 1, "x value for quadraic drag",  60, -999, 999)
quadratic_drag.add("quadratic_rot_x", double_t, 1, "rotation about x axis for quadratic drag",  60, -999, 999)
quadratic_drag.add("quadratic_rot_y", double_t, 1, "rotation about y axis for quadratic drag",  60, -999, 999)
quadratic_drag.add("quadratic_rot_z", double_t, 1, "rotation about z axis for quadratic drag",  60, -999, 999)

buoyancy.add("volume", double_t, 1, "volume of the robot",  60, -999, 999)
buoyancy.add("center_x", double_t, 1, "x value of the center of buoyancy",  60, -999, 999)
buoyancy.add("center_y", double_t, 1, "y value of the center of buoyancy",  60, -999, 999)
buoyancy.add("center_z", double_t, 1, "z value of the center of buoyancy",  60, -999, 999)

linear_motion.add("max_linear_velocity_x", double_t, 1, "x value for maximum linear velocity",  60, -999, 999)
linear_motion.add("max_linear_velocity_y", double_t, 1, "y value for maximum linear velocity",  60, -999, 999)
linear_motion.add("max_linear_velocity_z", double_t, 1, "z value for maximum linear velocity",  60, -999, 999)
linear_motion.add("max_linear_accel_x", double_t, 1, "x value for maximum linear acceleration",  60, -999, 999)
linear_motion.add("max_linear_accel_y", double_t, 1, "y value for maximum linear acceleration",  60, -999, 999)
linear_motion.add("max_linear_accel_z", double_t, 1, "z value for maximum linear acceleration",  60, -999, 999)

angular_motion.add("max_angular_velocity_x", double_t, 1, "x value for maximum angular velocity",  60, -999, 999)
angular_motion.add("max_angular_velocity_y", double_t, 1, "y value for maximum angular velocity",  60, -999, 999)
angular_motion.add("max_angular_velocity_z", double_t, 1, "z value for maximum angular velocity",  60, -999, 999)
angular_motion.add("max_angular_accel_x", double_t, 1, "x value for maximum angular acceleration",  60, -999, 999)
angular_motion.add("max_angular_accel_y", double_t, 1, "y value for maximum angular acceleration",  60, -999, 999)
angular_motion.add("max_angular_accel_z", double_t, 1, "z value for maximum angular acceleration",  60, -999, 999)

#                 PkgName  NodeName      Prefix for generated .h include file, e.g. NewController.py
exit(gen.generate(PACKAGE, "controller", "NewController"))